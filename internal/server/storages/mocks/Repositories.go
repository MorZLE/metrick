// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	server "github.com/MorZLE/metrick/internal/server"
	mock "github.com/stretchr/testify/mock"
)

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// AddCounter provides a mock function with given fields: v
func (_m *Repositories) AddCounter(v server.Counter) {
	_m.Called(v)
}

// AddGauge provides a mock function with given fields: v
func (_m *Repositories) AddGauge(v server.Gauge) {
	_m.Called(v)
}

// GetCounter provides a mock function with given fields: name
func (_m *Repositories) GetCounter(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGauge provides a mock function with given fields: name
func (_m *Repositories) GetGauge(name string) (float64, error) {
	ret := _m.Called(name)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields:
func (_m *Repositories) GetMetrics() (map[string]int, map[string]float64) {
	ret := _m.Called()

	var r0 map[string]int
	var r1 map[string]float64
	if rf, ok := ret.Get(0).(func() (map[string]int, map[string]float64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func() map[string]float64); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]float64)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositories interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositories creates a new instance of Repositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositories(t mockConstructorTestingTNewRepositories) *Repositories {
	mock := &Repositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
